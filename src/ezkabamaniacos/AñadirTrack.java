/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ezkabamaniacos;

import general.MysqlConnect;
import java.io.File;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import static util.Apariencia.mensajeInformativo;
import util.BaseDatos;
import util.Cadena;

/**
 *
 * @author Txus
 */
public class AñadirTrack extends javax.swing.JDialog {

    
    Gpx gpx;
    Stack<Integer> pila;
    boolean onTrack;
    TrackPoint trkpt;
    int nPuntos = 0;    
    String etiqueta[] = {"gpx", "metadata", "author", "name", "email", "time", "trk", "trkpt", "ele", "gpxtpx:hr"};
 
    File ficheroGpx;
        
    /**
     * Creates new form AñadirTrack
     */
    public AñadirTrack(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents(); 
        jfcFicheroTrackGpx.addChoosableFileFilter(new FileNameExtensionFilter("Ficheros GPX", "gpx"));
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jfcFicheroTrackGpx = new javax.swing.JFileChooser();
        jtffNombreTrack = new util.JTextFieldFijo(90);
        jlNombreTrack = new javax.swing.JLabel();
        jlAutor = new javax.swing.JLabel();
        jtffAutor = new util.JTextFieldFijo(45);
        jlFechaTrack = new javax.swing.JLabel();
        jtffeFechaTrack = new util.JTextFieldFecha();
        jlHoraTrack = new javax.swing.JLabel();
        jtffHoraTrack = new util.JTextFieldFijo(8);
        jlDescripcionTrack = new javax.swing.JLabel();
        jtffDescripcionTrack = new util.JTextFieldFijo(120);
        jlNumeroPuntosTrack = new javax.swing.JLabel();
        jtffNumeroPuntosTrack = new util.JTextFieldFijo(6);
        jbAñadir = new javax.swing.JButton();
        jlDistanciaTotalTrack = new javax.swing.JLabel();
        jtfn2dDistanciaTotalTrack = new util.JTextFieldNumero2Decimales();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jfcFicheroTrackGpx.setDialogTitle("Seleccionar fichero del Track (.gpx)");
        jfcFicheroTrackGpx.setFileSelectionMode(javax.swing.JFileChooser.FILES_AND_DIRECTORIES);
        jfcFicheroTrackGpx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jfcFicheroTrackGpxActionPerformed(evt);
            }
        });

        jlNombreTrack.setText("Nombre:");

        jlAutor.setText("Autor:");

        jlFechaTrack.setText("Fecha:");

        jtffeFechaTrack.setText("00.00.00");

        jlHoraTrack.setText("Hora:");

        jlDescripcionTrack.setText("Descripción:");

        jlNumeroPuntosTrack.setText("Número de puntos en el track:");

        jtffNumeroPuntosTrack.setEditable(false);

        jbAñadir.setText("Añadir");
        jbAñadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAñadirActionPerformed(evt);
            }
        });

        jlDistanciaTotalTrack.setText("Distancia total Track:");

        jtfn2dDistanciaTotalTrack.setEditable(false);
        jtfn2dDistanciaTotalTrack.setText("jTextFieldNumero2Decimales1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jfcFicheroTrackGpx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlDescripcionTrack)
                                .addGap(18, 18, 18)
                                .addComponent(jtffDescripcionTrack, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jlNombreTrack)
                                    .addComponent(jlAutor)
                                    .addComponent(jlFechaTrack))
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jtffNombreTrack, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jtffAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jtffeFechaTrack, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jlHoraTrack)
                                        .addGap(18, 18, 18)
                                        .addComponent(jtffHoraTrack, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlNumeroPuntosTrack)
                                .addGap(18, 18, 18)
                                .addComponent(jtffNumeroPuntosTrack, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(jlDistanciaTotalTrack)
                                .addGap(18, 18, 18)
                                .addComponent(jtfn2dDistanciaTotalTrack, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jbAñadir, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jfcFicheroTrackGpx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtffNombreTrack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlNombreTrack))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtffAutor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlAutor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtffeFechaTrack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlHoraTrack)
                    .addComponent(jtffHoraTrack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlFechaTrack))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtffDescripcionTrack, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlDescripcionTrack))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlNumeroPuntosTrack)
                    .addComponent(jtffNumeroPuntosTrack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlDistanciaTotalTrack)
                    .addComponent(jtfn2dDistanciaTotalTrack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jbAñadir)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jfcFicheroTrackGpxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jfcFicheroTrackGpxActionPerformed
        // TODO add your handling code here:
        /**abrimos el archivo seleccionado*/
        ficheroGpx = jfcFicheroTrackGpx.getSelectedFile();
        
        if (jfcFicheroTrackGpx.APPROVE_SELECTION.equals(evt.getActionCommand())) {
          if(ficheroGpx != null)
            cargaTrack();
        } else if (jfcFicheroTrackGpx.CANCEL_SELECTION.equals(evt.getActionCommand())) {
            System.out.println("Cancel was selected");
            this.setVisible(false);
        }
        
 
    }//GEN-LAST:event_jfcFicheroTrackGpxActionPerformed

    private void jbAñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAñadirActionPerformed
        boolean grabacionCorrecta = grabarTrackEnBD();
        
        if(grabacionCorrecta == true){
            mensajeInformativo(5, "Grabación del track CORRECTA!!!");
        }else{
            mensajeInformativo(5, "ERROR en la grabación del Track!!!");
        }              
            
    }//GEN-LAST:event_jbAñadirActionPerformed


    public Gpx devuelveGpx(){
        return gpx;
    }

    private void cargaTrack() {
        
        BufferedReader br = null;
        gpx = new Gpx();
        pila = new Stack<Integer>();       
        onTrack = false;
        nPuntos = 0;
        
                
        try {

            String line;

            // Conseguir el nombre del fichero
            br = new BufferedReader(new FileReader(ficheroGpx));
			//br = new BufferedReader(new FileReader("c:\\tmp\\endomondo.gpx"));

            while ((line = br.readLine()) != null) {		               
                
                //System.out.println("Linea: " + line);
                StringTokenizer stringTokenizer = new StringTokenizer(line, "<> ");

                while (stringTokenizer.hasMoreElements()) {

                    String token = stringTokenizer.nextElement().toString();

                    
                    procesaToken(token);
                    //System.out.println(token);
                }
            }

            jtffNombreTrack.setText(gpx.autorNombre);
            jtffeFechaTrack.setText(Utilidad.descomponFechaHora(gpx.time, 0));
            jtffHoraTrack.setText(Utilidad.descomponFechaHora(gpx.time, 1));
            System.out.println("Autor: " + gpx.autorNombre);
            System.out.println("Email: " + gpx.autorEmail);
            System.out.println("Fecha/Hora: " + gpx.time);
            System.out.println("Puntos de track: " + gpx.track.size());

    

            

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (br != null) {
                    br.close();
                }

            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
        
        jtffNumeroPuntosTrack.setText(String.valueOf(gpx.track.size()));
        
        // Caculamos la longitud total del track para tener mas informacion
        CoordenadaGeografica cg0 = new CoordenadaGeografica();
        CoordenadaGeografica cg1 = new CoordenadaGeografica();
        CoordenadaUTM utm0 = new CoordenadaUTM();
        CoordenadaUTM utm1 = new CoordenadaUTM();
        Iterator<TrackPoint> itrPartidos = gpx.track.iterator();
        boolean esPrimerPunto = true;
        double distanciaTotalTrack = 0.0;
        
        while(itrPartidos.hasNext()){
            
           TrackPoint punto = itrPartidos.next();
           
           
           if(esPrimerPunto == true){
                esPrimerPunto = false;
                
                cg0.setLatitud(punto.latitud);
                cg0.setLongitud(punto.longitud);
                
                utm0 = Utilidad.geograficaToUtm(cg0);
                                
                if(itrPartidos.hasNext()){
                    punto = itrPartidos.next();
                    
                    cg1.setLatitud(punto.latitud);
                    cg1.setLongitud(punto.longitud);
                }else{
                    cg1.setLatitud(cg0.getLatitud());
                    cg1.setLongitud(cg0.getLongitud());
                }          
                
                utm1 = Utilidad.geograficaToUtm(cg1);
           }else{
               cg1.setLatitud(punto.latitud);
               cg1.setLongitud(punto.longitud);
               
               utm1 = Utilidad.geograficaToUtm(cg1);
           } 
           
           distanciaTotalTrack += Utilidad.distanciaDosCoordenadasUTM(utm0, utm1);  
           
           cg0.setLatitud(cg1.getLatitud());
           cg0.setLongitud(cg1.getLongitud());
           utm0.setLatitud(utm1.getLatitud());
           utm0.setLongitud(utm1.getLongitud());
        }
        jtfn2dDistanciaTotalTrack.setText(String.valueOf(distanciaTotalTrack));
        gpx.distanciaTotal = distanciaTotalTrack;
        System.out.println("Distancia total del track: " + distanciaTotalTrack);
    }
    
    private void procesaToken(String token) {
        boolean esCierre = false;
        int intToken = 0;
        int intPilaPop = 0;

        if (token.startsWith("/")) {
            esCierre = true;
            token = token.substring(1);
        }
        if (token.endsWith("/") && !token.endsWith(".com/")) {
            esCierre = true;
            token = etiqueta[pila.peek()];
        }

        intToken = esTag(token);
        // Vemos si es una Etiqueta
        if (intToken >= 0) {
            // Si es una etiqueta de cierre, debemos sacarla de la pila
            if (esCierre) {
				// Si estamos cerrando un punto, lo tenemos que añadir a la lista de
                // puntos del track.
                if (intToken == 7) {
                    gpx.track.add(trkpt);
                    nPuntos++;
                }
                intPilaPop = pila.pop();
                if (intPilaPop != intToken) {
                    System.out.println("Fichero mal formado, las etiquetas no están emparejadas!!!");
                    System.exit(0);
                }
            } else {
                // No es etiqueta de cierre, luego la tenemos que meter en la pila
                pila.push(intToken);

				// Tenemos que saber si ya estamos en el trak porque la etiqueta 'time' se puede
                // referir al tiempo global del Track o a cada punto del track
                if (intToken == 6) {
                    onTrack = true;
                }
                // Tenemos un punto de track nuevo
                if (intToken == 7) {
                    trkpt = new TrackPoint();
                }
            }
        }

		// Como no es una etiqueta, tenemos que ver en que punto estamos de la pila y tratar el token
        // como corresponda
        if (intToken == -1 && !pila.isEmpty()) {
            switch (pila.peek()) {
                // gpx
                case 0:
                    break;
                // metadata
                case 1:
                    break;
                // author
                case 2:
                    break;
                // name
                case 3:
                    gpx.autorNombre += token + " ";
                    break;
                // email
                case 4:
                    gpx.autorEmail += token;
                    break;
                // time
                case 5: // Si ya estamos en un Track, estamos hablando del tiempo de un punto
                    if (onTrack) {
                        trkpt.descomponFecha(token);
                    } else {
                        // Si no estamos en un Track, estamos hablando del tiempo genérico del Track
                        gpx.time = token;
                    }
                    break;
                // trk
                case 6:
                    break;
                // trkpt
                case 7:
                    if (token.startsWith("lat=")) {
                        trkpt.latitud = extraeEntreComillas(token);
                    }
                    if (token.startsWith("lon=")) {
                        trkpt.longitud = extraeEntreComillas(token);
                    }
                    break;
                // ele
                case 8:
                    trkpt.altura = Double.valueOf(token.trim());
                    break;
                // gpxtpx:hr
                case 9:
                    trkpt.pulsaciones = Integer.valueOf(token.trim());
                    break;
            }
        }
    }

    private int esTag(String str) {
        int resultado = -1;

	// Buscamos la etiqueta, si la encontramos, devolvemos el índice que ocupa
        // y si no la encontramos, devolvemos -1
        for (int i = 0; i < etiqueta.length; i++) {
            if (str.equalsIgnoreCase(etiqueta[i])) {
                return i;
            }
        }

        return resultado;
    }

    private double extraeEntreComillas(String str) {
        double resultado = 0.0;
        String strResultado = "";

        if (str.startsWith("lat")) {
            str = str.replaceAll("lat=\"", "");
        }

        if (str.startsWith("lon")) {
            str = str.replaceAll("lon=\"", "");
        }

        strResultado = str.replaceAll("\"", "");

        resultado = Double.valueOf(strResultado);

        return resultado;
    }
        
    class MiFiltroGpx extends javax.swing.filechooser.FileFilter {
    public boolean accept(File file) {
        String filename = file.getName();
        return filename.endsWith(".gpx");
    }
    public String getDescription() {
        return "*.gpx";
    }
}
    
    private boolean grabarTrackEnBD(){
        boolean grabacionOk = true;
        ResultSet rs = null;
        MysqlConnect m = null;
        Statement s = null;

        m = MysqlConnect.getDbCon();

        // Vemos cuantos tracks hay guardados en la base de datos.
        int idTrack = BaseDatos.countRows("SELECT * FROM EZKABAMANIACOS.NOMBRESDETRACK");

        // Si idTrack == 0 -> que no hay ningún track guardado
        // Entonces el primer ID tiene que ser el 1
        if (idTrack == 0) {
            idTrack = 1;
        } else {
            // Si ya hay, tenemos que averiguar el valor mas alto para el ID
            // y sumarle 1 para tener el Id del siguente Track libre.
            String strSQL = "SELECT MAX(ID) FROM EZKABAMANIACOS.NOMBRESDETRACK";
            try {
                rs = m.query(strSQL);
                if(rs.next() == true)
                    idTrack = rs.getInt(1) + 1;
                else
                    grabacionOk = false;
            } catch (SQLException ex) {
                grabacionOk = false;
                Logger.getLogger(AñadirTrack.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        // Ya tenemos el ID del track
        if (grabacionOk == true) {

            PreparedStatement ps = null;

            String sqlInsert = "INSERT INTO EZKABAMANIACOS.NOMBRESDETRACK "
                    + "(ID, "
                    + "NOMBRE, "
                    + "FECHA, "
                    + "HORA, "
                    + "CREADOR, "
                    + "DESCRIPCION, "
                    + "LONGITUDTOTAL) "
                    + "VALUES (?, ?, ?, ?, ?, ?, ?) "
                    + "ON DUPLICATE KEY UPDATE "
                    + "ID = ?, "
                    + "NOMBRE = ?, "
                    + "FECHA = ?, "
                    + "HORA = ?, "
                    + "CREADOR = ?, "
                    + "DESCRIPCION = ?, "
                    + "LONGITUDTOTAL = ? ";

            try {
                ps = MysqlConnect.db.conn.prepareStatement(sqlInsert);
                int i = 1;
                // Insert
                ps.setInt(i++, idTrack);
                ps.setString(i++, jtffNombreTrack.getText().trim());
                ps.setString(i++, jtffeFechaTrack.getText().trim());
                ps.setString(i++, jtffHoraTrack.getText().trim());
                ps.setString(i++, jtffDescripcionTrack.getText().trim());
                ps.setString(i++, jtffAutor.getText().trim());
                ps.setDouble(i++, gpx.distanciaTotal);

                // Update
                ps.setInt(i++, idTrack);
                ps.setString(i++, jtffNombreTrack.getText().trim());
                ps.setString(i++, jtffeFechaTrack.getText().trim());
                ps.setString(i++, jtffHoraTrack.getText().trim());
                ps.setString(i++, jtffDescripcionTrack.getText().trim());
                ps.setString(i++, jtffAutor.getText().trim());
                ps.setDouble(i++, gpx.distanciaTotal);

                ps.execute();

            } catch (SQLException e) {
                grabacionOk = false;

                JOptionPane.showMessageDialog(null,
                        "Error en escritura fichero de Nombres de Track!!!");
                e.printStackTrace();
            }

        }
        
        // Ya tenemos grabada la Tabla de Nombres de Track, ahora a por los puntos del track
        // Primero AUTOCOMMIT = 0 para que lo haga mas rápido y todo a la vez en el commit
        try {
            s = MysqlConnect.db.conn.createStatement();
            s.executeUpdate("SET AUTOCOMMIT = 0");
        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        
        Iterator<TrackPoint> itrPartidos = gpx.track.iterator();
        String sqlInsert;
        int puntoTrack = 0;        
        PreparedStatement ps = null;
        
	while(itrPartidos.hasNext()){
            
            TrackPoint punto = itrPartidos.next();
            
            sqlInsert = "INSERT INTO EZKABAMANIACOS.TRACKS "
                    + "(ID, "
                    + "NUMEROPUNTO, "
                    + "LATITUD, "
                    + "LONGITUD, "
                    + "ELEVACION, "
                    + "FECHA, "
                    + "HORA, "
                    + "PULSACIONES) "
                    + "VALUES (?, ?, ?, ?, ?, ?, ?, ?) "
                    + "ON DUPLICATE KEY UPDATE "
                    + "ID = ?, "
                    + "NUMEROPUNTO = ?, "
                    + "LATITUD = ?, "
                    + "LONGITUD = ?, "
                    + "ELEVACION = ?, "
                    + "FECHA = ?, "
                    + "HORA = ?, "
                    + "PULSACIONES = ? ";

            try {
                ps = MysqlConnect.db.conn.prepareStatement(sqlInsert);
                int i = 1;
                // Insert
                ps.setInt(i++, idTrack);
                ps.setInt(i++, puntoTrack);
                ps.setDouble(i++, punto.latitud);
                ps.setDouble(i++, punto.longitud);
                ps.setDouble(i++, punto.altura);
                ps.setString(i++, punto.dia.trim());
                ps.setString(i++, punto.hora.trim());
                ps.setInt(i++, punto.pulsaciones);

                // Update
                ps.setInt(i++, idTrack);
                ps.setInt(i++, puntoTrack);
                ps.setDouble(i++, punto.latitud);
                ps.setDouble(i++, punto.longitud);
                ps.setDouble(i++, punto.altura);
                ps.setString(i++, punto.dia.trim());
                ps.setString(i++, punto.hora.trim());
                ps.setInt(i++, punto.pulsaciones);

                ps.execute();
                
                ps.close();
                
                puntoTrack++;

            } catch (SQLException e) {
                grabacionOk = false;

                JOptionPane.showMessageDialog(null,
                        "Error en escritura fichero de Puntos de Track!!!");
                e.printStackTrace();
            }
                        
        }
        
        try {
            s.executeUpdate("COMMIT");
            s.executeUpdate("SET AUTOCOMMIT = 1");
            ps.close();
            rs.close();
            s.close();
            ps = null;
            rs = null;
            s = null;
        } catch (SQLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        System.out.println("Número de tracks: " + idTrack);
        return grabacionOk;
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbAñadir;
    private javax.swing.JFileChooser jfcFicheroTrackGpx;
    private javax.swing.JLabel jlAutor;
    private javax.swing.JLabel jlDescripcionTrack;
    private javax.swing.JLabel jlDistanciaTotalTrack;
    private javax.swing.JLabel jlFechaTrack;
    private javax.swing.JLabel jlHoraTrack;
    private javax.swing.JLabel jlNombreTrack;
    private javax.swing.JLabel jlNumeroPuntosTrack;
    private util.JTextFieldFijo jtffAutor;
    private util.JTextFieldFijo jtffDescripcionTrack;
    private util.JTextFieldFijo jtffHoraTrack;
    private util.JTextFieldFijo jtffNombreTrack;
    private util.JTextFieldFijo jtffNumeroPuntosTrack;
    private util.JTextFieldFecha jtffeFechaTrack;
    private util.JTextFieldNumero2Decimales jtfn2dDistanciaTotalTrack;
    // End of variables declaration//GEN-END:variables
}
